<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>블로그</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 블로그</description>
    <generator>Hugo -- 0.147.3</generator>
    <language>ko</language>
    <lastBuildDate>Sat, 03 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebRTC howling ...</title>
      <link>http://localhost:1313/articles/webrtc-howling/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/webrtc-howling/</guid>
      <description>&lt;h2 id=&#34;하울링은-왜-생기는가&#34;&gt;하울링은 왜 생기는가?&lt;/h2&gt;
&lt;p&gt;하울링은 간단히 말하면, &lt;strong&gt;자신의 마이크에서 들어온 소리가 다시 자신의 스피커로 출력되고&lt;/strong&gt;,&lt;br&gt;
그게 다시 마이크로 입력되면서 무한 루프를 타는 상황입니다.&lt;br&gt;
WebRTC는 &lt;code&gt;getUserMedia&lt;/code&gt;로 마이크와 카메라를 활성화하고, 실시간으로 stream을 주고받기 때문에 이런 구조에서는 오디오 루프가 쉽게 생길 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;여러-방법을-시도해봤습니다&#34;&gt;여러 방법을 시도해봤습니다&lt;/h2&gt;
&lt;p&gt;처음에는 아래와 같은 해결책들을 시도했습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연결 직후 마이크를 자동으로 mute 처리&lt;/li&gt;
&lt;li&gt;local stream과 remote stream을 분리해 렌더링&lt;/li&gt;
&lt;li&gt;오디오 트랙만 따로 추적해서 제어&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;audio muted /&amp;gt;&lt;/code&gt; 설정 (그러나 의도대로 안 되는 경우도 많음)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 완벽하게 해결되진 않았고, 상황에 따라 다시 하울링이 발생했습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>React Native에 CodePush 도입기</title>
      <link>http://localhost:1313/articles/react-native-codepush/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/react-native-codepush/</guid>
      <description>&lt;p&gt;React Native 기반 앱 프로젝트를 운영하면서, Store 심사 지연으로 인해 &lt;strong&gt;Hotfix 배포나 간단한 UI 수정조차 수일 이상 소요&lt;/strong&gt;되는 일이 잦았습니다.&lt;/p&gt;
&lt;p&gt;특히, 사용자(근로자)에게 주일 마다 피드백을 받아오는 상황에서 잦은 빈도로 업데이트되던 서비스였기 때문에, 이런 병목은 전체 업데이트 일정에 큰 영향을 끼쳤습니다.&lt;/p&gt;
&lt;p&gt;이러한 문제를 해결하기 위해 &lt;strong&gt;CodePush 기반의 무중단 배포 환경&lt;/strong&gt;을 구축했습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;왜-codepush를-도입했는가&#34;&gt;왜 CodePush를 도입했는가&lt;/h2&gt;
&lt;p&gt;Microsoft에서 제공하는 &lt;a href=&#34;https://microsoft.github.io/code-push/&#34;&gt;CodePush&lt;/a&gt;는 React Native 앱의 JS 번들만 OTA(Over-the-Air) 방식으로 배포할 수 있도록 해주는 서비스입니다.&lt;br&gt;
앱을 재설치하거나 스토어 심사를 거치지 않고도 즉각적인 업데이트가 가능한 구조입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Context API -&gt; Recoil 성능 개선 과정</title>
      <link>http://localhost:1313/articles/context-recoil/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/context-recoil/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://localhost:1313/articles/client-server-state&#34;&gt;이전 글&lt;/a&gt;에서 클라이언트 상태와 서버 상태를 분리하는 과정에서&lt;br&gt;
Context API 대신 Recoil을 도입하게 된 이유를 정리한 바 있습니다.&lt;/p&gt;
&lt;p&gt;이번 글에서는 해당 구조가 실제 프로젝트에서 어떻게 적용되었는지,&lt;br&gt;
그리고 Recoil을 사용함으로써 &lt;strong&gt;성능 측면에서 어떤 개선 효과가 있었는지&lt;/strong&gt;를 자세히 공유하려고 합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;왜-recoil이-필요했는가&#34;&gt;왜 Recoil이 필요했는가&lt;/h2&gt;
&lt;p&gt;이전 글에서 언급했듯이 처음에는 Context API만으로도 충분해 보였다.&lt;br&gt;
작은 단위의 상태들을 중앙에서 관리하고, 빠르게 구조화할 수 있었기 때문이다. 하지만 프로젝트가 커지고 기능이 쌓이면서, Context를 사용하는 컴포넌트가 많아지고, 하나의 값 변경에도 여러 곳에서 렌더링이 발생하기 시작했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Next.js에서의 styled-components SSR 이슈와 해결</title>
      <link>http://localhost:1313/articles/styled-components-ssr/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/styled-components-ssr/</guid>
      <description>&lt;p&gt;Next.js 프로젝트(v12)에서 &lt;code&gt;styled-components&lt;/code&gt;를 적용하며 발생한 &lt;strong&gt;스타일 FOUC(Flash of Unstyled Content)&lt;/strong&gt; 문제와 이를 해결한 과정을 정리했습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;문제-상황-ssr-환경에서의-스타일-미적용&#34;&gt;문제 상황: SSR 환경에서의 스타일 미적용&lt;/h2&gt;
&lt;p&gt;Next.js는 기본적으로 &lt;strong&gt;서버 사이드 렌더링(SSR)&lt;/strong&gt; 을 지원하며, 초기 페이지 로드 시 HTML을 미리 생성해 클라이언트에 전달합니다.&lt;/p&gt;
&lt;p&gt;프로젝트 초기에 아래와 같은 문제가 발생했습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로고침 시 &lt;strong&gt;스타일이 적용되지 않은 HTML이 먼저 렌더링&lt;/strong&gt;됨&lt;/li&gt;
&lt;li&gt;이후 JS가 로드되면서 styled-components 스타일이 적용됨&lt;/li&gt;
&lt;li&gt;사용자 입장에서 &lt;strong&gt;순간적으로 깨진 UI&lt;/strong&gt;가 보이는 경험을 하게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이는 흔히 말하는 &lt;strong&gt;FOUC (Flash of Unstyled Content)&lt;/strong&gt; 플리커 현상으로, SSR 환경에서 &lt;code&gt;styled-components&lt;/code&gt;를 사용할 때 자주 발생하는 이슈입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Context API 대신 React Query를 선택한 이유</title>
      <link>http://localhost:1313/articles/react-query-migration/</link>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/react-query-migration/</guid>
      <description>&lt;p&gt;이전 글에서 &lt;a href=&#34;http://localhost:1313/articles/client-server-state&#34;&gt;Recoil 활용&lt;/a&gt;해 클라이언트 상태를 정리했던 이야기를 남긴 적이 있다.&lt;br&gt;
이번에는 같은 프로젝트 내에서 서버 상태를 다루는 방식에 대해 정리해보려 한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;context-api를-빠르게-선택했던-이유&#34;&gt;Context API를 빠르게 선택했던 이유&lt;/h2&gt;
&lt;p&gt;처음 프로젝트를 시작할 때는 아주 간단한 요구사항만 있었기 때문에, 굳이 무거운 상태 관리 라이브러리를 도입하지 않고 Context API만으로 충분하다고 판단했다.&lt;br&gt;
속도를 중시한 결정이었다. 실제로 빠르게 결과물을 만들 수 있었고, 배포도 문제없이 진행됐다.&lt;/p&gt;
&lt;p&gt;하지만 이후 사업이 확장되며 기능이 하나씩 추가되기 시작했고, 그때부터 context 구조가 무겁게 느껴지기 시작했다.&lt;br&gt;
추가되는 context마다 리렌더링 범위가 넓어졌고, UI 단위에서만 필요한 데이터까지 전역에 얹히는 구조가 되었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>클라이언트와 서버 상태, 왜 분리했는가?</title>
      <link>http://localhost:1313/articles/client-server-state/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/articles/client-server-state/</guid>
      <description>&lt;p&gt;프로젝트를 진행하다 보면 어느 순간 상태가 복잡해지기 시작합니다.&lt;br&gt;
처음에는 간단한 기능만 있어서 Context API로도 충분해 보였고, 그렇게 빠르게 개발을 시작했습니다.&lt;br&gt;
하지만 기능이 늘어나고 화면과 상태의 연동이 많아지면서, 상태 관리 구조에 대한 고민이 본격적으로 생겼습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;context-api에서-발생한-문제&#34;&gt;Context API에서 발생한 문제&lt;/h2&gt;
&lt;p&gt;Context는 간단하고 직관적인 구조라는 점에서 좋지만, 하나의 상태가 바뀌면 해당 Provider 아래의 모든 컴포넌트가 함께 리렌더링되는 특성이 있습니다.&lt;br&gt;
이 문제를 해결하기 위해 Provider를 잘게 쪼개는 방식으로 대응해보기도 했습니다.&lt;br&gt;
하지만 상태가 많아지고, 각각의 의존성을 분리해야 하는 상황에서는 점점 코드가 복잡해졌습니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
